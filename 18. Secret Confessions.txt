I created my first website in 1994 using NCSA HTTPD and Mosaic as the only browser available.  It started simple enough, just html and common gateway interface (cgi). Peter Tattum's trumpet windows sockets (winsock) helped foster new browsers including Netscape and ECMAScript and Cold Fusion. Java was also served freshly brewed starting with applets, servlets, application servers, enterprise java beans, java server pages, struts and XML/XSLT. Microsoft jumped in the game with active server pages and .Net framework to carry us through 2000. Next we saw PHP and Ruby on Rails.  Today the rage is Node JS. Whew, what a ride. 

As you see,  I'm working hard to contain my enthusiasm to learn more ways to markup a web site.

To be fair, there's a lot of 'experienced' folks who are constantly striving to keep their skill sets sharp. Its necessary and unfortunate as there are a large number of tools and methods that are constantly being reinvented to build web applications. The JavaScript language is one example. We follow Angular JS, Backbone and Ember. What we are finding is that we must continue to learn and support new tools every three years to remain relevant in the workplace.

I hoping Node JS is different. Being able to develop a web services API and make calls through it rapidly is refreshing. The code base, has a large following,  and is fast becoming a stable platform for hosting server side code. What I'm unsure about is its ability to maintain an it intensive environment. 

(Comments below borrowed from random blogs) 
"I'm a node.js developer making $1000 a day writing enterprise solutions for large companies - so I'm not complaining :)"
"Look, I can relate some of the arguments, and I will not stand here and defend Node.js to my death just because I make a living from it."
"Still, I'd like to talk about some of the arguments which are for the most part invalid and uneducated."

"Callback-hell"
Use promises or ES6. Callback hell was a real concern but not anymore.
"Debugging is a bitch"
Not with Node inspector and Chrome. Works great and has all the bells and whistles you'd expect like breakpoints and reading variables at runtime.
"Javascript was not made for server side"
Things evolve. Also there's a big difference to client-side JavaScript and Node.js JavaScript. It is all EcmaScript but targets different cores (DOM vs Node core modules).
In fact, JavaScript was also not built to make applications likes Gmail and games - but still someone did it and made great work.
People use the tools available.
"The packages arenâ€™t that good"
This is certainly not unique to Node.js. You can find poor code and documentation for virtually any popular programming language - like PHP.
When you have a programming language that is mainly community based you must expect both poor, mediocre and brilliant code.
But hey, you've decided that Node.js sucks - not much I can do about that.
